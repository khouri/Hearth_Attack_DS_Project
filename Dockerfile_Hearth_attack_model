# Estágio de construção
FROM python:3.11.4-slim as builder
# FROM scratch

WORKDIR /app

# 1. Instalar apenas o Poetry (sem dependências extras)
RUN pip install --user poetry==1.7.1

# 2. Configurar Poetry para não criar virtualenv (usaremos o do container)
ENV POETRY_VIRTUALENVS_CREATE=false
ENV POETRY_NO_INTERACTION=1
ENV POETRY_NO_ANS=1
ENV PATH="/root/.local/bin:$PATH"

ENV KAGGLE_USERNAME="adilsonkhouri"
ENV KAGGLE_KEY=""
ENV PROJECT_ABS_PATH="/app"


# 3. Copiar apenas os arquivos necessários para instalação (melhor cache)
COPY . .

# 4. Instalar dependências em diretório separado (para copiar depois)
RUN poetry install --only main --no-root && \
    poetry cache clear --all pypi -n && \
    python scripts_to_docker/train_best_model.py && \
    rm -rf /root/.cache/pip

# --------------------------------------------------
# Estágio final (imagem de produção)
FROM python:3.11.4-slim

WORKDIR /app

# 2. Configurar Poetry para não criar virtualenv (usaremos o do container)
ENV POETRY_VIRTUALENVS_CREATE=false
ENV POETRY_NO_INTERACTION=1
ENV POETRY_NO_ANS=1
ENV PATH="/root/.local/bin:$PATH"

ENV KAGGLE_USERNAME="adilsonkhouri"
ENV KAGGLE_KEY=""
ENV PROJECT_ABS_PATH="/app"

# # 6. Copiar apenas o necessário do estágio builder
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin
COPY --from=builder /app/serialized_models/Random_forest.joblib /app/serialized_models/Random_forest.joblib

# # 7. Garantir que o PATH inclua o .local/bin
ENV PATH="/root/.local/bin:/app/.venv/bin:$PATH"

# # 8. Usar usuário não-root para segurança
RUN useradd -m appuser && \
    chown -R appuser:appuser /app && \
    find /usr/local/lib/python3.11 -name '*.dist-info' -exec rm -rf {} + && \
    find /usr/local/lib/python3.11 -name 'tests' -exec rm -rf {} + && \
    rm -rf /var/lib/apt/lists/*

USER appuser
